{
 "Resources": {
  "TestAppVPCDECA2088": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/Resource"
   }
  },
  "TestAppVPCPublicSubnet1Subnet5FBABE03": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet1/Subnet"
   }
  },
  "TestAppVPCPublicSubnet1RouteTable657E7D08": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet1/RouteTable"
   }
  },
  "TestAppVPCPublicSubnet1RouteTableAssociationA6CAFB7F": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestAppVPCPublicSubnet1RouteTable657E7D08"
    },
    "SubnetId": {
     "Ref": "TestAppVPCPublicSubnet1Subnet5FBABE03"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet1/RouteTableAssociation"
   }
  },
  "TestAppVPCPublicSubnet1DefaultRouteD3B66032": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "TestAppVPCIGW6CE8D7D7"
    },
    "RouteTableId": {
     "Ref": "TestAppVPCPublicSubnet1RouteTable657E7D08"
    }
   },
   "DependsOn": [
    "TestAppVPCVPCGW344A8B3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet1/DefaultRoute"
   }
  },
  "TestAppVPCPublicSubnet1EIP1AAD2E61": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet1/EIP"
   }
  },
  "TestAppVPCPublicSubnet1NATGateway409CABE0": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "TestAppVPCPublicSubnet1EIP1AAD2E61",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "TestAppVPCPublicSubnet1Subnet5FBABE03"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "TestAppVPCPublicSubnet1DefaultRouteD3B66032",
    "TestAppVPCPublicSubnet1RouteTableAssociationA6CAFB7F"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet1/NATGateway"
   }
  },
  "TestAppVPCPublicSubnet2Subnet1666907F": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet2/Subnet"
   }
  },
  "TestAppVPCPublicSubnet2RouteTableF0CD627B": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet2/RouteTable"
   }
  },
  "TestAppVPCPublicSubnet2RouteTableAssociationAF0AEACF": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestAppVPCPublicSubnet2RouteTableF0CD627B"
    },
    "SubnetId": {
     "Ref": "TestAppVPCPublicSubnet2Subnet1666907F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet2/RouteTableAssociation"
   }
  },
  "TestAppVPCPublicSubnet2DefaultRoute3D8D1384": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "TestAppVPCIGW6CE8D7D7"
    },
    "RouteTableId": {
     "Ref": "TestAppVPCPublicSubnet2RouteTableF0CD627B"
    }
   },
   "DependsOn": [
    "TestAppVPCVPCGW344A8B3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PublicSubnet2/DefaultRoute"
   }
  },
  "TestAppVPCPrivateSubnet1Subnet6E126316": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet1/Subnet"
   }
  },
  "TestAppVPCPrivateSubnet1RouteTable7065FE3E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet1/RouteTable"
   }
  },
  "TestAppVPCPrivateSubnet1RouteTableAssociation06E64591": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestAppVPCPrivateSubnet1RouteTable7065FE3E"
    },
    "SubnetId": {
     "Ref": "TestAppVPCPrivateSubnet1Subnet6E126316"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet1/RouteTableAssociation"
   }
  },
  "TestAppVPCPrivateSubnet1DefaultRouteA080E88E": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "TestAppVPCPublicSubnet1NATGateway409CABE0"
    },
    "RouteTableId": {
     "Ref": "TestAppVPCPrivateSubnet1RouteTable7065FE3E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet1/DefaultRoute"
   }
  },
  "TestAppVPCPrivateSubnet2SubnetE5812EEA": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet2/Subnet"
   }
  },
  "TestAppVPCPrivateSubnet2RouteTableF041613F": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet2/RouteTable"
   }
  },
  "TestAppVPCPrivateSubnet2RouteTableAssociation5BDBB185": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestAppVPCPrivateSubnet2RouteTableF041613F"
    },
    "SubnetId": {
     "Ref": "TestAppVPCPrivateSubnet2SubnetE5812EEA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet2/RouteTableAssociation"
   }
  },
  "TestAppVPCPrivateSubnet2DefaultRoute2D3DB2B1": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "TestAppVPCPublicSubnet1NATGateway409CABE0"
    },
    "RouteTableId": {
     "Ref": "TestAppVPCPrivateSubnet2RouteTableF041613F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/PrivateSubnet2/DefaultRoute"
   }
  },
  "TestAppVPCIGW6CE8D7D7": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "CdkStack/TestAppVPC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/IGW"
   }
  },
  "TestAppVPCVPCGW344A8B3A": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "TestAppVPCIGW6CE8D7D7"
    },
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/VPCGW"
   }
  },
  "TestAppVPCRestrictDefaultSecurityGroupCustomResource2273AB1A": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "TestAppVPCDECA2088",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppVPC/RestrictDefaultSecurityGroupCustomResource/Default"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "TestAppVPCDECA2088",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler",
    "aws:asset:path": "asset.7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200",
    "aws:asset:property": "Code"
   }
  },
  "TestAppCluster8D54A1F5": {
   "Type": "AWS::ECS::Cluster",
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppCluster/Resource"
   }
  },
  "EcsExecutionRoleFD93B7A2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/EcsExecutionRole/Resource"
   }
  },
  "TestAppTaskRole7F41EE3A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppTaskRole/Resource"
   }
  },
  "TestAppTaskRoleDefaultPolicyF0F91719": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "secretsmanager:GetSecretValue",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:secretsmanager:sa-east-1:",
          {
           "Ref": "AWS::AccountId"
          },
          ":secret:TestAppSecrets*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TestAppTaskRoleDefaultPolicyF0F91719",
    "Roles": [
     {
      "Ref": "TestAppTaskRole7F41EE3A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppTaskRole/DefaultPolicy/Resource"
   }
  },
  "TestAppTaskE01CB289": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "DJANGO_SETTINGS_MODULE",
        "Value": "testapp.settings"
       },
       {
        "Name": "DJANGO_DEBUG",
        "Value": "False"
       },
       {
        "Name": "DJANGO_ALLOWED_HOSTS",
        "Value": {
         "Fn::GetAtt": [
          "DjangoServiceLBDB67D563",
          "DNSName"
         ]
        }
       }
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         "public.ecr.aws/",
         {
          "Ref": "AWS::AccountId"
         },
         ".dkr.ecr.sa-east-1.amazonaws.com/cdk-hnb659fds-container-assets-863518431049-sa-east-1:latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "TestAppLogGroup945C01C5"
        },
        "awslogs-stream-prefix": "TestApp",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "TestAppContainer",
      "PortMappings": [
       {
        "ContainerPort": 8000,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "DJANGO_SECRET_KEY",
        "ValueFrom": {
         "Fn::Join": [
          "",
          [
           "arn:aws:secretsmanager:sa-east-1:",
           {
            "Ref": "AWS::AccountId"
           },
           ":secret:TestAppSecrets:DJANGO_SECRET_KEY::"
          ]
         ]
        }
       }
      ]
     }
    ],
    "Cpu": "512",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "TestAppTaskExecutionRole7E021936",
      "Arn"
     ]
    },
    "Family": "CdkStackTestAppTask3579DCFC",
    "Memory": "1024",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "TestAppTaskRole7F41EE3A",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppTask/Resource"
   }
  },
  "TestAppTaskExecutionRole7E021936": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppTask/ExecutionRole/Resource"
   }
  },
  "TestAppTaskExecutionRoleDefaultPolicy46D62323": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "TestAppLogGroup945C01C5",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:secretsmanager:sa-east-1:",
          {
           "Ref": "AWS::AccountId"
          },
          ":secret:TestAppSecrets"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TestAppTaskExecutionRoleDefaultPolicy46D62323",
    "Roles": [
     {
      "Ref": "TestAppTaskExecutionRole7E021936"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppTask/ExecutionRole/DefaultPolicy/Resource"
   }
  },
  "TestAppLogGroup945C01C5": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/ecs/TestAppLogs",
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/TestAppLogGroup/Resource"
   }
  },
  "DjangoServiceLBDB67D563": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "DjangoServiceLBSecurityGroup04BD3C38",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "TestAppVPCPublicSubnet1Subnet5FBABE03"
     },
     {
      "Ref": "TestAppVPCPublicSubnet2Subnet1666907F"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "TestAppVPCPublicSubnet1DefaultRouteD3B66032",
    "TestAppVPCPublicSubnet1RouteTableAssociationA6CAFB7F",
    "TestAppVPCPublicSubnet2DefaultRoute3D8D1384",
    "TestAppVPCPublicSubnet2RouteTableAssociationAF0AEACF"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/LB/Resource"
   }
  },
  "DjangoServiceLBSecurityGroup04BD3C38": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB CdkStackDjangoServiceLB8B5A8107",
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 80",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/LB/SecurityGroup/Resource"
   }
  },
  "DjangoServiceLBSecurityGrouptoCdkStackDjangoServiceSecurityGroup0E041AB2800031AA9115": {
   "Type": "AWS::EC2::SecurityGroupEgress",
   "Properties": {
    "Description": "Load balancer to target",
    "DestinationSecurityGroupId": {
     "Fn::GetAtt": [
      "DjangoServiceSecurityGroupB785C401",
      "GroupId"
     ]
    },
    "FromPort": 8000,
    "GroupId": {
     "Fn::GetAtt": [
      "DjangoServiceLBSecurityGroup04BD3C38",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "ToPort": 8000
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/LB/SecurityGroup/to CdkStackDjangoServiceSecurityGroup0E041AB2:8000"
   }
  },
  "DjangoServiceLBPublicListener212DDF4C": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "DjangoServiceLBPublicListenerECSGroup44A6047F"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "DjangoServiceLBDB67D563"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/LB/PublicListener/Resource"
   }
  },
  "DjangoServiceLBPublicListenerECSGroup44A6047F": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/LB/PublicListener/ECSGroup/Resource"
   }
  },
  "DjangoServiceDD9C71D7": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "TestAppCluster8D54A1F5"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "TestAppContainer",
      "ContainerPort": 8000,
      "TargetGroupArn": {
       "Ref": "DjangoServiceLBPublicListenerECSGroup44A6047F"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "DjangoServiceSecurityGroupB785C401",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "TestAppVPCPrivateSubnet1Subnet6E126316"
       },
       {
        "Ref": "TestAppVPCPrivateSubnet2SubnetE5812EEA"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "TestAppTaskE01CB289"
    }
   },
   "DependsOn": [
    "DjangoServiceLBPublicListenerECSGroup44A6047F",
    "DjangoServiceLBPublicListener212DDF4C",
    "TestAppTaskRoleDefaultPolicyF0F91719",
    "TestAppTaskRole7F41EE3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/Service/Service"
   }
  },
  "DjangoServiceSecurityGroupB785C401": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "CdkStack/DjangoService/Service/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "TestAppVPCDECA2088"
    }
   },
   "DependsOn": [
    "TestAppTaskRoleDefaultPolicyF0F91719",
    "TestAppTaskRole7F41EE3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/Service/SecurityGroup/Resource"
   }
  },
  "DjangoServiceSecurityGroupfromCdkStackDjangoServiceLBSecurityGroup286B3AC68000C3698E4B": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 8000,
    "GroupId": {
     "Fn::GetAtt": [
      "DjangoServiceSecurityGroupB785C401",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "DjangoServiceLBSecurityGroup04BD3C38",
      "GroupId"
     ]
    },
    "ToPort": 8000
   },
   "DependsOn": [
    "TestAppTaskRoleDefaultPolicyF0F91719",
    "TestAppTaskRole7F41EE3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/Service/SecurityGroup/from CdkStackDjangoServiceLBSecurityGroup286B3AC6:8000"
   }
  },
  "DjangoServiceTaskCountTarget492FA416": {
   "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
   "Properties": {
    "MaxCapacity": 5,
    "MinCapacity": 1,
    "ResourceId": {
     "Fn::Join": [
      "",
      [
       "service/",
       {
        "Ref": "TestAppCluster8D54A1F5"
       },
       "/",
       {
        "Fn::GetAtt": [
         "DjangoServiceDD9C71D7",
         "Name"
        ]
       }
      ]
     ]
    },
    "RoleARN": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":iam::",
       {
        "Ref": "AWS::AccountId"
       },
       ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ]
     ]
    },
    "ScalableDimension": "ecs:service:DesiredCount",
    "ServiceNamespace": "ecs"
   },
   "DependsOn": [
    "TestAppTaskRoleDefaultPolicyF0F91719",
    "TestAppTaskRole7F41EE3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/Service/TaskCount/Target/Resource"
   }
  },
  "DjangoServiceTaskCountTargetCpuScaling18F723E6": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "CdkStackDjangoServiceTaskCountTargetCpuScalingFD893C47",
    "PolicyType": "TargetTrackingScaling",
    "ScalingTargetId": {
     "Ref": "DjangoServiceTaskCountTarget492FA416"
    },
    "TargetTrackingScalingPolicyConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
     },
     "ScaleInCooldown": 60,
     "ScaleOutCooldown": 60,
     "TargetValue": 50
    }
   },
   "DependsOn": [
    "TestAppTaskRoleDefaultPolicyF0F91719",
    "TestAppTaskRole7F41EE3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/Service/TaskCount/Target/CpuScaling/Resource"
   }
  },
  "DjangoServiceTaskCountTargetMemoryScaling5EB3ADD5": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "CdkStackDjangoServiceTaskCountTargetMemoryScaling24EAD89D",
    "PolicyType": "TargetTrackingScaling",
    "ScalingTargetId": {
     "Ref": "DjangoServiceTaskCountTarget492FA416"
    },
    "TargetTrackingScalingPolicyConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "ECSServiceAverageMemoryUtilization"
     },
     "ScaleInCooldown": 60,
     "ScaleOutCooldown": 60,
     "TargetValue": 60
    }
   },
   "DependsOn": [
    "TestAppTaskRoleDefaultPolicyF0F91719",
    "TestAppTaskRole7F41EE3A"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/DjangoService/Service/TaskCount/Target/MemoryScaling/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/81XSY/bNhT+LdWx4KhwDkU6N42SBgamGcM25lDDCGjyjcMMTapcNHEN//c+LlocO0WLpIUPhqS38eNbPtKvysnrSTn5gb7YG8afb6TYlIeFo+yZoOjDAdir8vDYsNWh2NHP1Z+2uC1+LEihqHtHHbzQfZIc16R+Uo+zmsz8Rgq28BsFDr1oS4WkGyGF2/+uFWT/tmFTnt+Z4OZOavacv3e0SUGmzYO6p16xj8WtMx5IIZr25/oLc2qt2KopairODVj7oGoD1AmtEjRyJSgiEM7f96krbleoWV8NwOtAkVopNVB4m2vvYEk3Egb5IKus1UzEAL1xeHk7nYXHkGwyM6LF1+/emU9U2ivI+bfBuB4kVwIjdeFUOTDYLl0PJY7LX5VDnvy4A+XIApg3iPed0b7B3kKweSkOlhnR9KFxcSn1SyXlg3cb7RXPSDM7TNU2AJp7iRvHSIwiCCkUJEmaLKaVAhZidnzslfjDQ05QrGcQx8DrHPntOHDQZqMQMtp0oC8iGTnkqGlMxxs/E6Qlz8Q58pEAs+Whlt5ilkdZS6GznPxKzZaGabfPb+BJKBH2HfFc+EXPU1NSa+UoZtCMZDnoAkwrGKw6z/xNFozKwC4hUo1FcgGrKefQaCucNvs7amG1JoLuysNcSwh8Yq3fAb9DWj8UjRGKiYbKirHgPzQe2gSHio26DRtY0S3wmcYeFmBj5ceyfWWGAbmsSGX+XzB0HbXUSRFMx8Ju3TNtHJjUzr2uPwH/VvkN+zIoeU93MO7t/wbk1+Ou09mER1gSp3HK4ZY6aM5WORdzjjczB4FxbAf4uwW6LI7AE+YjkXqL83qvtx3NyfzapxezDTvdDrsP/OeM3ueZ7nzj6H9oEB/Sqy2rpkHzyL/3mvI7HD7FgJ8OKQFJrRNMosUmWgi1bfF6etnbrMaUMFaQsYNAjlGD8QmPdMqxwxIx4XnQ0d3o80joYEa90xZJBCHifbpnk2CMebNpRyFttqEs5A7zgQvbbPlGYBHscGYgXWpvGPQnoIkVTYefUDXFKMiu/XH4+UQSihsiw1IvDV7tfwNnBOtIHecJeGBG4J0iRmliCUel5cIGbGE3MO2QubinRyp9Z2aTvtZacv0ypox/j+E8+j9D9RUMieNPqkHSI2LCYi1SzVL7dta94Hgk81yJCw2Dx5XejfVp6rPgC/3M6FZwMOEgIXiJBYezt8WVgg9eDRqPZ47SHMpP9qd28rqc/IJ/0z5ZIW4Mch72RzlPz78AJJQtHMMNAAA="
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "DjangoServiceLoadBalancerDNSDE4DECD1": {
   "Value": {
    "Fn::GetAtt": [
     "DjangoServiceLBDB67D563",
     "DNSName"
    ]
   }
  },
  "DjangoServiceServiceURL9BB7BF44": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Fn::GetAtt": [
        "DjangoServiceLBDB67D563",
        "DNSName"
       ]
      }
     ]
    ]
   }
  },
  "LoadBalancerDNS": {
   "Value": {
    "Fn::GetAtt": [
     "DjangoServiceLBDB67D563",
     "DNSName"
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}